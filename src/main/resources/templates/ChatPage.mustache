<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Live Chat & Active Admins</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
      }
      h2 {
        margin-top: 30px;
      }
      ul {
        list-style: none;
        padding: 0;
      }
      li {
        margin-bottom: 10px;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        display: flex;
        align-items: center;
        gap: 10px;
      }
      img {
        border-radius: 50%;
        width: 40px;
        height: 40px;
        object-fit: cover;
      }
      .chat-info,
      .admin-info {
        display: flex;
        flex-direction: column;
      }
      .chat-user,
      .admin-user {
        font-weight: bold;
      }
      .chat-message {
        font-size: 0.9em;
        color: #555;
      }
      .chat-time,
      .admin-status {
        font-size: 0.8em;
        color: #999;
      }
    </style>
  </head>
  <body>
    <h2>Last Chats</h2>
    <ul id="chat-list"></ul>

    <h2>Active Admins</h2>
    <ul id="admin-list"></ul>

    <div id="messageHistory"></div>

    <script>
      const username = "{{username}}";

      async function fetchLastChats() {
        try {
          const res = await fetch("/live-chat/latest", {
            method: "GET",
            credentials: "include",
          });
          if (!res.ok) throw new Error("HTTP error! status: " + res.status);
          const data = await res.json();
          renderChatList(data);
        } catch (err) {
          console.error("Failed to fetch last chats:", err);
        }
      }

      function renderChatList(chats) {
        const ul = document.getElementById("chat-list");
        ul.innerHTML = "";
        if (chats.length === 0) {
          ul.innerHTML = "<li>No chats yet</li>";
          return;
        }

        chats.forEach((chat) => {
          const li = document.createElement("li");
          console.log(chat);

          const img = document.createElement("img");
          img.src = chat.profile_picture
            ? "/uploads/" + chat.profile_picture
            : "/img/default.jpg";
          img.alt = chat.username;

          const infoDiv = document.createElement("div");
          infoDiv.className = "chat-info";

          const userDiv = document.createElement("div");
          userDiv.className = "chat-user";
          userDiv.innerHTML = `${chat.fullName} <small>@${chat.username} • ${chat.role}</small>`;

          const messageDiv = document.createElement("div");
          messageDiv.className = "chat-message";
          messageDiv.textContent = chat.message;

          const timeDiv = document.createElement("div");
          timeDiv.className = "chat-time";
          timeDiv.textContent = new Date(chat.createdAt).toLocaleString();

          infoDiv.appendChild(userDiv);
          infoDiv.appendChild(messageDiv);
          infoDiv.appendChild(timeDiv);

          li.appendChild(img);
          li.appendChild(infoDiv);
          ul.appendChild(li);

          li.addEventListener("click", async () => {
            try {
              const res = await fetch(
                `/live-chat/message?with=${encodeURIComponent(chat.username)}`
              );
              if (!res.ok) throw new Error("Gagal ambil data");
              const messages = await res.json();

              const historyDiv = document.getElementById("messageHistory");
              historyDiv.innerHTML = ""; // clear sebelumnya

              messages.forEach((msg) => {
                const bubble = document.createElement("div");
                bubble.className =
                  msg.ownMessage
                    ? "bubble own" // styling untuk pesan sendiri
                    : "bubble other"; // styling untuk pesan lawan

                // kalau mau tampil foto lawan bicara (hanya untuk pesan 'other')
                if (!msg.ownMessage) {
                  const avatar = document.createElement("img");
                  avatar.src = msg.otherProfilePicture
                    ? "/uploads/" + msg.otherProfilePicture
                    : "/img/default.jpg";
                  avatar.alt = msg.otherUsername;
                  avatar.className = "avatar";
                  bubble.appendChild(avatar);
                }

                const text = document.createElement("span");
                text.textContent = msg.message;

                bubble.appendChild(text);
                historyDiv.appendChild(bubble);
              });
            } catch (err) {
              console.error(err);
            }
          });
        });
      }

      // --- Fetch active admins ---
      async function fetchActiveAdmins() {
        try {
          const res = await fetch("/live-chat/active-admin", {
            method: "GET",
            credentials: "include",
          });
          if (!res.ok) throw new Error("HTTP error! status: " + res.status);
          const data = await res.json();
          renderAdminList(data);
        } catch (err) {
          console.error("Failed to fetch active admins:", err);
        }
      }

      function renderAdminList(admins) {
        const ul = document.getElementById("admin-list");
        ul.innerHTML = "";
        if (admins.length === 0) {
          ul.innerHTML = "<li>No admins online</li>";
          return;
        }

        admins.forEach((admin) => {
          if (admin.username === username) return; // skip self
          const li = document.createElement("li");

          const img = document.createElement("img");
          img.src = admin.imageUrl
            ? "/uploads/" + admin.imageUrl
            : "/img/default.jpg";
          img.alt = admin.username;

          const infoDiv = document.createElement("div");
          infoDiv.className = "admin-info";

          const userDiv = document.createElement("div");
          userDiv.className = "admin-user";
          userDiv.innerHTML = `${admin.fullName} <small>@${admin.username} • ${admin.role}</small>`;

          const statusDiv = document.createElement("div");
          statusDiv.className = "admin-status";
          statusDiv.textContent = `online ${admin.online}`;

          infoDiv.appendChild(userDiv);
          infoDiv.appendChild(statusDiv);

          li.appendChild(img);
          li.appendChild(infoDiv);
          ul.appendChild(li);
        });
      }

      // --- Initial fetch & auto-refresh ---
      fetchLastChats();
      fetchActiveAdmins();
      setInterval(() => {
        fetchActiveAdmins();
      }, 10000);
    </script>
  </body>
</html>
